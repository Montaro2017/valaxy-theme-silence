/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck
// Generated by unplugin-vue-router. ‼️ DO NOT MODIFY THIS FILE ‼️
// It's recommended to commit this file.
// Make sure to add this file to your tsconfig.json file as an "includes" or "files" entry.

declare module 'vue-router/auto-routes' {
  import type {
    RouteRecordInfo,
    ParamValue,
    ParamValueOneOrMore,
    ParamValueZeroOrMore,
    ParamValueZeroOrOne,
  } from 'vue-router'

  /**
   * Route name map generated by unplugin-vue-router
   */
  export interface RouteNamedMap {
    '/': RouteRecordInfo<'/', '/', Record<never, never>, Record<never, never>>,
    '/[...path]': RouteRecordInfo<'/[...path]', '/:path(.*)', { path: ParamValue<true> }, { path: ParamValue<false> }>,
    '/about': RouteRecordInfo<'/about', '/about', Record<never, never>, Record<never, never>>,
    '/archives': RouteRecordInfo<'/archives', '/archives', Record<never, never>, Record<never, never>>,
    '/categories': RouteRecordInfo<'/categories', '/categories', Record<never, never>, Record<never, never>>,
    '/category.[category]': RouteRecordInfo<'/category.[category]', '/category/:category', { category: ParamValue<true> }, { category: ParamValue<false> }>,
    '/notes/': RouteRecordInfo<'/notes/', '/notes', Record<never, never>, Record<never, never>>,
    '/posts/draft': RouteRecordInfo<'/posts/draft', '/posts/draft', Record<never, never>, Record<never, never>>,
    '/posts/hello-valaxy': RouteRecordInfo<'/posts/hello-valaxy', '/posts/hello-valaxy', Record<never, never>, Record<never, never>>,
    '/posts/i18n': RouteRecordInfo<'/posts/i18n', '/posts/i18n', Record<never, never>, Record<never, never>>,
    '/posts/idea-jdk21-compile-jdk17/': RouteRecordInfo<'/posts/idea-jdk21-compile-jdk17/', '/posts/idea-jdk21-compile-jdk17', Record<never, never>, Record<never, never>>,
    '/posts/logstash-sqlserver-pagination': RouteRecordInfo<'/posts/logstash-sqlserver-pagination', '/posts/logstash-sqlserver-pagination', Record<never, never>, Record<never, never>>,
    '/posts/long-title': RouteRecordInfo<'/posts/long-title', '/posts/long-title', Record<never, never>, Record<never, never>>,
    '/posts/markdown': RouteRecordInfo<'/posts/markdown', '/posts/markdown', Record<never, never>, Record<never, never>>,
    '/posts/post1': RouteRecordInfo<'/posts/post1', '/posts/post1', Record<never, never>, Record<never, never>>,
    '/posts/post2': RouteRecordInfo<'/posts/post2', '/posts/post2', Record<never, never>, Record<never, never>>,
    '/posts/post3': RouteRecordInfo<'/posts/post3', '/posts/post3', Record<never, never>, Record<never, never>>,
    '/posts/post4': RouteRecordInfo<'/posts/post4', '/posts/post4', Record<never, never>, Record<never, never>>,
    '/posts/springboot-annotation-pagination/': RouteRecordInfo<'/posts/springboot-annotation-pagination/', '/posts/springboot-annotation-pagination', Record<never, never>, Record<never, never>>,
    '/posts/test': RouteRecordInfo<'/posts/test', '/posts/test', Record<never, never>, Record<never, never>>,
    '/search': RouteRecordInfo<'/search', '/search', Record<never, never>, Record<never, never>>,
    '/tag.[tag]': RouteRecordInfo<'/tag.[tag]', '/tag/:tag', { tag: ParamValue<true> }, { tag: ParamValue<false> }>,
    '/tags': RouteRecordInfo<'/tags', '/tags', Record<never, never>, Record<never, never>>,
    '/test': RouteRecordInfo<'/test', '/test', Record<never, never>, Record<never, never>>,
  }

  /**
   * Route file to route info map by unplugin-vue-router.
   * Used by the volar plugin to automatically type useRoute()
   *
   * Each key is a file path relative to the project root with 2 properties:
   * - routes: union of route names of the possible routes when in this page (passed to useRoute<...>())
   * - views: names of nested views (can be passed to <RouterView name="...">)
   *
   * @internal
   */
  export interface _RouteFileInfoMap {
    '../theme/pages/index.vue': {
      routes: '/'
      views: never
    }
    '../theme/pages/[...path].vue': {
      routes: '/[...path]'
      views: never
    }
    'pages/about.md': {
      routes: '/about'
      views: never
    }
    '../theme/pages/archives.vue': {
      routes: '/archives'
      views: never
    }
    '../theme/pages/categories.vue': {
      routes: '/categories'
      views: never
    }
    '../theme/pages/category.[category].vue': {
      routes: '/category.[category]'
      views: never
    }
    'pages/notes/index.md': {
      routes: '/notes/'
      views: never
    }
    'pages/posts/draft.md': {
      routes: '/posts/draft'
      views: never
    }
    'pages/posts/hello-valaxy.md': {
      routes: '/posts/hello-valaxy'
      views: never
    }
    'pages/posts/i18n.md': {
      routes: '/posts/i18n'
      views: never
    }
    'pages/posts/idea-jdk21-compile-jdk17/index.md': {
      routes: '/posts/idea-jdk21-compile-jdk17/'
      views: never
    }
    'pages/posts/logstash-sqlserver-pagination.md': {
      routes: '/posts/logstash-sqlserver-pagination'
      views: never
    }
    'pages/posts/long-title.md': {
      routes: '/posts/long-title'
      views: never
    }
    'pages/posts/markdown.md': {
      routes: '/posts/markdown'
      views: never
    }
    'pages/posts/post1.md': {
      routes: '/posts/post1'
      views: never
    }
    'pages/posts/post2.md': {
      routes: '/posts/post2'
      views: never
    }
    'pages/posts/post3.md': {
      routes: '/posts/post3'
      views: never
    }
    'pages/posts/post4.md': {
      routes: '/posts/post4'
      views: never
    }
    'pages/posts/springboot-annotation-pagination/index.md': {
      routes: '/posts/springboot-annotation-pagination/'
      views: never
    }
    'pages/posts/test.md': {
      routes: '/posts/test'
      views: never
    }
    '../theme/pages/search.vue': {
      routes: '/search'
      views: never
    }
    '../theme/pages/tag.[tag].vue': {
      routes: '/tag.[tag]'
      views: never
    }
    '../theme/pages/tags.vue': {
      routes: '/tags'
      views: never
    }
    'pages/test.md': {
      routes: '/test'
      views: never
    }
  }

  /**
   * Get a union of possible route names in a certain route component file.
   * Used by the volar plugin to automatically type useRoute()
   *
   * @internal
   */
  export type _RouteNamesForFilePath<FilePath extends string> =
    _RouteFileInfoMap extends Record<FilePath, infer Info>
      ? Info['routes']
      : keyof RouteNamedMap
}
